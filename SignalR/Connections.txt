----------------- Quick Demo --------------------------------------------
Open VS2010
Create a new ASP.NET Empty Website
Install-Package SignalR
Note server library, client script, jQuery dependency
Install-Package SignalR.Sample and show stock ticker in two browsers
----------------- Quick Demo ---------------------------------------------

----------------- without Internet connection ----------------------------
Install-Package jQuery

Add a class:
public class TimeConnection : PersistentConnection { }

Add a route:
	RouteTable.Routes.MapConnection<TimeConnection>("time", "time/{*operation}"); 

Add an infinite loop:
    ThreadPool.QueueUserWorkItem( _ =>
    {
	var connectionContext = GlobalHost.ConnectionManager.GetConnectionContext<TimeConnection>( );

	while ( true )
	{
	    connectionContext.Connection.Broadcast( DateTime.Now.ToString( ) );
	    Thread.Sleep( 1000 );
	}
    } );

Add some HTML:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="Scripts/jquery-1.8.2.min.js" type="text/javascript"></script>
    <script src="Scripts/jquery.signalR-0.5.3.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            var connection = $.connection('time');

            connection.received(function(data) {
                $('h1').text('The time is ' + data);
            });

            connection.start();
        });
    </script>
</head>
<body>
    <h1>The time is now!</h1>
</body>
</html>
----------------- without Internet connection ----------------------------

----------------- with Internet connection ----------------------------
Install-Package jQuery
Install-Package LinqToTwitter

Add a class:
public class TweetsConnection : PersistentConnection { }

Add a route:
	RouteTable.Routes.MapConnection<TweetsConnection>("tweets", "tweets/{*operation}"); 

Add an infinite loop:
	ThreadPool.QueueUserWorkItem( _ =>
		{
		    var connectionContext = GlobalHost.ConnectionManager.GetConnectionContext<TweetsConnection>( );
		    while ( true )
		    {
			using ( TwitterContext context = new TwitterContext( ) )
			{
			    var tweets = context.Search.Where( t => t.Type == SearchType.Search && t.Query == "#fnord" )
				.SingleOrDefault( ).Results;

			    connectionContext.Connection.Broadcast( tweets );
			}
			Thread.Sleep( 5000 );
		    }
		} );

Add some HTML:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="Scripts/jquery-1.8.2.min.js" type="text/javascript"></script>
    <script src="Scripts/jquery.signalR-0.5.3.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            var connection = $.connection('tweets');

            connection.received(function (data) {
                $('#tweetsList').html('');
                for (var i = 0; i < data.length; i++) {
                    $('#tweetsList').append($('<li>' + data[i].Text + '</li>'));
                }
            });

            connection.start();
        });
    </script>
</head>
<body>
    <h1>Tweets</h1>
    <ul id="tweetsList"></ul>
</body>
</html>
----------------- with Internet connection ----------------------------

----------------- KnockedTweets.htm with Internet connection ----------------------------
Install-Package jQuery
Install-Package knockoutjs

Add some HTML:
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="Scripts/jquery-1.8.2.min.js" type="text/javascript"></script>
    <script src="Scripts/jquery.signalR-0.5.3.min.js" type="text/javascript"></script>
    <script src="Scripts/knockout-2.1.0.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            var TweetsViewModel = function (connection) {
                var self = this;

                self.tweets = ko.observableArray();
                self.connection = connection;

                self.connection.received(function (data) {
                    self.tweets.removeAll();
                    $.each(data, function (i, item) {
                        self.tweets.push(item);
                    });
                });

                self.connection.start();
            };

            var connection = $.connection('tweets');
            ko.applyBindings(new TweetsViewModel(connection));
        });
    </script>
</head>
<body>
    <h1>Tweets</h1>
    <ul data-bind="foreach: tweets">
        <li data-bind="html: Text" />
    </ul>
    
    <span data-bind="text: tweets().length"></span> tweet<span data-bind="visible: tweets.length == 0 || tweets.length > 1">s</span>
</body>
</html>
----------------- KnockedTweets.htm with Internet connection ----------------------------